package com.openMap1.mapper.FHIRTransforms;

/**
 * This software was auto-generated by the 'Transforms By Example' toolset;
 * See http://www.openmapsw.com/TBE/TBEGeneral.htm for details.
 * Transform By Example tools are available to NHS Organisations under the Code4Health initiative.
 */

import java.util.List;
import java.util.Vector;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Document;
import org.hl7.fhir.dstu3.model.*;
import org.hl7.fhir.dstu3.model.BaseResource;

import org.hl7.fhir.dstu3.model.CodeableConcept;
import org.hl7.fhir.dstu3.model.ContactPoint;
import org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent;
import org.hl7.fhir.dstu3.model.Practitioner;
import org.hl7.fhir.dstu3.model.Patient;
import org.hl7.fhir.dstu3.model.Identifier;
import com.openMap1.mapper.FHIRConversions.FHIRConverters;
import org.hl7.fhir.dstu3.model.Address;
import org.hl7.fhir.dstu3.model.Coding;
import org.hl7.fhir.dstu3.model.Patient.PatientCommunicationComponent;
import org.hl7.fhir.dstu3.model.Patient.ContactComponent;
import org.hl7.fhir.dstu3.model.HumanName;
import org.hl7.fhir.dstu3.model.Bundle;

public class ADTTransform extends BaseTransformer {

    // to check that the compiled class is the correct version
    public String getGeneratedDateTime() {return("Sat Mar 17 15:54:28 GMT 2018");}

    // to check that the compiled class is the correct version; change version when making hand edits
    public String getVersion() {return("1");}

    // to make a Java Date for HAPI from a FHIR formatted date
    protected DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");


    /**
     * @param  sDoc the input document
     * @ return the result of the transform
     */
    public BaseResource transform(Document sDoc) throws Exception
    {
        try {
            Element root = sDoc.getDocumentElement();
            return topRule(root);
        }
        // catch and throw, to print the full stack of any exception when the class is invoked reflectively in testing
        catch (Exception ex) {
            ex.printStackTrace();
            throw new Exception(ex.getMessage());
        }
    }

//--------------------------------------------------------------------------------------
//                                  Bundle and Patient
//--------------------------------------------------------------------------------------

    /**
     * @param sourceTop
     */
    protected BaseResource topRule(Element sourceTop) throws Exception
    {
        if (!("ADT_A05".equals(getName(sourceTop))))
            throw new Exception("Root element is not named 'ADT_A05'");
        Bundle target = new Bundle();
        Bundle.BundleEntryComponent t_entry_Patient_Bund = new Bundle.BundleEntryComponent();
        target.addEntry(t_entry_Patient_Bund);
        Patient t_resource_Patient = new Patient();
        t_entry_Patient_Bund.setResource(t_resource_Patient);
        t_resource_Patient.setId("001");

        List<Element> stack1 = push(sourceTop, new Vector<Element>());
        pBirthDate(stack1, t_resource_Patient);
        pGender(stack1, t_resource_Patient);
        rBundle_Entry_Practi(stack1, target);
        rName_HumanName(stack1, t_resource_Patient);
        rAddress_Address(stack1, t_resource_Patient);
        rIdentifier_Identifi_1(stack1, t_resource_Patient);
        rTelecom_ContactPoin(stack1, t_resource_Patient);
        rPatient_Contact(stack1, t_resource_Patient);
        rPatient_Communicati(stack1, t_resource_Patient);
        return target;
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void pBirthDate(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID,stack);

            Node sBirthDate = namedChildNode(sPID,"PID.7");

            if (sBirthDate != null && getText(sBirthDate)!=null && !getText(sBirthDate).isEmpty()) t_resource_Patient.setBirthDate(dateFormat.parse(FHIRConverters.date_V2_to_FHIR(null,getText(sBirthDate))));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void pGender(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sNK1 : namedChildElements(sourceTop,"NK1"))
        {
            List<Element> stack1 = push(sNK1,stack);
            for(Element sGender : namedChildElements(sNK1,"NK1.1"))
            {
                t_resource_Patient.setGender(Enumerations.AdministrativeGender.fromCode(patient_gender_conversion(getText(sGender))));
            }
        }
    }

//--------------------------------------------------------------------------------------
//                                  Practitioner
//--------------------------------------------------------------------------------------

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param target - reached by target path: Bundle
     */
    protected void rBundle_Entry_Practi(List<Element> stack, Bundle target) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPD1 : namedChildElements(sourceTop,"PD1"))
        {
            List<Element> stack1 = push(sPD1,stack);
            for(Element sPD1_1 : namedChildElements(sPD1,"PD1.4"))
            {
                Bundle.BundleEntryComponent t_entry_Practitioner = new Bundle.BundleEntryComponent();
                target.addEntry(t_entry_Practitioner);
                Practitioner t_resource_Practitio = new Practitioner();
                t_entry_Practitioner.setResource(t_resource_Practitio);
                HumanName t_name_HumanName = new HumanName();
                t_resource_Practitio.addName(t_name_HumanName);
                List<Element> stack2 = push(sPD1_1,stack1);
                pFamily(stack2, t_name_HumanName);

                Node sXCN_1 = namedChildNode(sPD1_1,"XCN.6");
                if (sXCN_1 != null) t_name_HumanName.getPrefix().add(new StringType(getText(sXCN_1)));

                Node sXCN_2 = namedChildNode(sPD1_1,"XCN.3");
                if (sXCN_2 != null) t_name_HumanName.getGiven().add(new StringType(getText(sXCN_2)));
                rIdentifier_Identifi(stack2, t_resource_Practitio);
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PD1; (2)PD1_4;
     * @param t_name_HumanName - reached by target path: Bundle.entry.resource.name
     */
    protected void pFamily(List<Element> stack, HumanName t_name_HumanName) throws Exception
    {
        Element sPD1_1 = stack.get(2);
        for(Element sXCN : namedChildElements(sPD1_1,"XCN.2"))
        {
            List<Element> stack1 = push(sXCN,stack);

            Node sFamily = namedChildNode(sXCN,"FN.1");
            if (sFamily != null) t_name_HumanName.setFamily(getText(sFamily));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PD1; (2)PD1_4;
     * @param t_resource_Practitio - reached by target path: Bundle.entry.resource
     */
    protected void rIdentifier_Identifi(List<Element> stack, Practitioner t_resource_Practitio) throws Exception
    {
        Element sPD1_1 = stack.get(2);
        for(Element sXCN_3 : namedChildElements(sPD1_1,"XCN.1"))
        {
            Identifier t_identifier_Identif = new Identifier();
            t_resource_Practitio.addIdentifier(t_identifier_Identif);
            t_identifier_Identif.setSystem("GP_ID");
            t_identifier_Identif.setValue(getText(sXCN_3));
        }
    }

//--------------------------------------------------------------------------------------
//                                  Patient
//--------------------------------------------------------------------------------------

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rName_HumanName(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID_1 : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID_1,stack);
            for(Element sPID_2 : namedChildElements(sPID_1,"PID.5"))
            {
                HumanName t_name_HumanName_1 = new HumanName();
                t_resource_Patient.addName(t_name_HumanName_1);
                List<Element> stack2 = push(sPID_2,stack1);
                pFamily_1(stack2, t_name_HumanName_1);
                pUse(stack2, t_name_HumanName_1);

                Node sXPN_1 = namedChildNode(sPID_2,"XPN.5");
                if (sXPN_1 != null) t_name_HumanName_1.getPrefix().add(new StringType(getText(sXPN_1)));

                Node sXPN_2 = namedChildNode(sPID_2,"XPN.2");
                if (sXPN_2 != null) t_name_HumanName_1.getGiven().add(new StringType(getText(sXPN_2)));
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PID; (2)PID_5;
     * @param t_name_HumanName_1 - reached by target path: Bundle.entry.resource.name
     */
    protected void pFamily_1(List<Element> stack, HumanName t_name_HumanName_1) throws Exception
    {
        Element sPID_2 = stack.get(2);
        for(Element sXPN : namedChildElements(sPID_2,"XPN.1"))
        {
            List<Element> stack1 = push(sXPN,stack);

            Node sFamily_1 = namedChildNode(sXPN,"FN.1");
            if (sFamily_1 != null) t_name_HumanName_1.setFamily(getText(sFamily_1));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PID; (2)PID_5;
     * @param t_name_HumanName_1 - reached by target path: Bundle.entry.resource.name
     */
    protected void pUse(List<Element> stack, HumanName t_name_HumanName_1) throws Exception
    {
        Element sPID_2 = stack.get(2);
        for(Element sUse : namedChildElements(sPID_2,"XPN.7"))
        {
            t_name_HumanName_1.setUse(HumanName.NameUse.fromCode(humanName_use_conversion(getText(sUse))));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rAddress_Address(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID_3 : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID_3,stack);
            for(Element sPID_4 : namedChildElements(sPID_3,"PID.11"))
            {
                Address t_Address = new Address();
                t_resource_Patient.addAddress(t_Address);
                List<Element> stack2 = push(sPID_4,stack1);

                Node sCity = namedChildNode(sPID_4,"XAD.3");
                if (sCity != null) t_Address.setCity(getText(sCity));

                Node sDistrict = namedChildNode(sPID_4,"XAD.4");
                if (sDistrict != null) t_Address.setDistrict(getText(sDistrict));

                Node sPostalCode = namedChildNode(sPID_4,"XAD.5");
                if (sPostalCode != null) t_Address.setPostalCode(getText(sPostalCode));

                Node sCountry = namedChildNode(sPID_4,"XAD.6");
                if (sCountry != null) t_Address.setCountry(getText(sCountry));
                pUse_1(stack2, t_Address);
                rLine_string(stack2, t_Address);

                Node sXAD_1 = namedChildNode(sPID_4,"XAD.2");
                if (sXAD_1 != null) t_Address.getLine().add(new StringType(getText(sXAD_1)));
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PID; (2)PID_11;
     * @param t_Address - reached by target path: Bundle.entry.resource.address
     */
    protected void pUse_1(List<Element> stack, Address t_Address) throws Exception
    {
        Element sPID_4 = stack.get(2);
        for(Element sUse_1 : namedChildElements(sPID_4,"XAD.7"))
        {
            t_Address.setUse(Address.AddressUse.fromCode(address_use_conversion(getText(sUse_1))));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PID; (2)PID_11;
     * @param t_Address - reached by target path: Bundle.entry.resource.address
     */
    protected void rLine_string(List<Element> stack, Address t_Address) throws Exception
    {
        Element sPID_4 = stack.get(2);
        for(Element sXAD : namedChildElements(sPID_4,"XAD.1"))
        {
            List<Element> stack1 = push(sXAD,stack);

            Node sSAD = namedChildNode(sXAD,"SAD.1");
            if (sSAD != null) t_Address.getLine().add(new StringType(getText(sSAD)));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rIdentifier_Identifi_1(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID_5 : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID_5,stack);
            for(Element sPID_6 : namedChildElements(sPID_5,"PID.3"))
            {
                Identifier t_identifier_Identif_1 = new Identifier();
                t_resource_Patient.addIdentifier(t_identifier_Identif_1);
                List<Element> stack2 = push(sPID_6,stack1);

                Node sValue = namedChildNode(sPID_6,"CX.1");
                if (sValue != null) t_identifier_Identif_1.setValue(getText(sValue));
                pSystem(stack2, t_identifier_Identif_1);
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)PID; (2)PID_3;
     * @param t_identifier_Identif_1 - reached by target path: Bundle.entry.resource.identifier
     */
    protected void pSystem(List<Element> stack, Identifier t_identifier_Identif_1) throws Exception
    {
        Element sPID_6 = stack.get(2);
        for(Element sCX : namedChildElements(sPID_6,"CX.4"))
        {
            List<Element> stack1 = push(sCX,stack);

            Node sSystem = namedChildNode(sCX,"HD.1");
            if (sSystem != null) t_identifier_Identif_1.setSystem(getText(sSystem));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rTelecom_ContactPoin(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID_7 : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID_7,stack);
            for(Element sPID_8 : namedChildElements(sPID_7,"PID.13"))
            {
                List<Element> stack2 = push(sPID_8,stack1);
                for(Element sXTN : namedChildElements(sPID_8,"XTN.1"))
                {
                    ContactPoint t_telecom_ContactPoi = new ContactPoint();
                    t_resource_Patient.addTelecom(t_telecom_ContactPoi);
                    t_telecom_ContactPoi.setSystem(ContactPoint.ContactPointSystem.fromCode("phone"));
                    t_telecom_ContactPoi.setValue(getText(sXTN));
                }
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rPatient_Contact(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sNK1_1 : namedChildElements(sourceTop,"NK1"))
        {
            Patient.ContactComponent t_contact_Patient_Co = new Patient.ContactComponent();
            t_resource_Patient.addContact(t_contact_Patient_Co);
            List<Element> stack1 = push(sNK1_1,stack);
            rAddress_Address_1(stack1, t_contact_Patient_Co);
            rName_HumanName_1(stack1, t_contact_Patient_Co);
            rTelecom_ContactPoin_1(stack1, t_contact_Patient_Co);
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1;
     * @param t_contact_Patient_Co - reached by target path: Bundle.entry.resource.contact
     */
    protected void rAddress_Address_1(List<Element> stack, Patient.ContactComponent t_contact_Patient_Co) throws Exception
    {
        Element sNK1_1 = stack.get(1);
        for(Element sNK1_2 : namedChildElements(sNK1_1,"NK1.4"))
        {
            Address t_Address_1 = new Address();
            t_contact_Patient_Co.setAddress(t_Address_1);
            List<Element> stack1 = push(sNK1_2,stack);

            Node sCity_1 = namedChildNode(sNK1_2,"XAD.3");
            if (sCity_1 != null) t_Address_1.setCity(getText(sCity_1));

            Node sDistrict_1 = namedChildNode(sNK1_2,"XAD.4");
            if (sDistrict_1 != null) t_Address_1.setDistrict(getText(sDistrict_1));

            Node sPostalCode_1 = namedChildNode(sNK1_2,"XAD.5");
            if (sPostalCode_1 != null) t_Address_1.setPostalCode(getText(sPostalCode_1));

            Node sCountry_1 = namedChildNode(sNK1_2,"XAD.6");
            if (sCountry_1 != null) t_Address_1.setCountry(getText(sCountry_1));
            pUse_2(stack1, t_Address_1);

            Node sXAD_2 = namedChildNode(sNK1_2,"XAD.2");
            if (sXAD_2 != null) t_Address_1.getLine().add(new StringType(getText(sXAD_2)));
            rLine_string_3(stack1, t_Address_1);
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1; (2)NK1_4;
     * @param t_Address_1 - reached by target path: Bundle.entry.resource.contact.address
     */
    protected void pUse_2(List<Element> stack, Address t_Address_1) throws Exception
    {
        Element sNK1_2 = stack.get(2);
        for(Element sUse_2 : namedChildElements(sNK1_2,"XAD.7"))
        {
            t_Address_1.setUse(Address.AddressUse.fromCode(address_use_conversion(getText(sUse_2))));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1; (2)NK1_4;
     * @param t_Address_1 - reached by target path: Bundle.entry.resource.contact.address
     */
    protected void rLine_string_3(List<Element> stack, Address t_Address_1) throws Exception
    {
        Element sNK1_2 = stack.get(2);
        for(Element sXAD_3 : namedChildElements(sNK1_2,"XAD.1"))
        {
            List<Element> stack1 = push(sXAD_3,stack);

            Node sSAD_1 = namedChildNode(sXAD_3,"SAD.1");
            if (sSAD_1 != null) t_Address_1.getLine().add(new StringType(getText(sSAD_1)));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1;
     * @param t_contact_Patient_Co - reached by target path: Bundle.entry.resource.contact
     */
    protected void rName_HumanName_1(List<Element> stack, Patient.ContactComponent t_contact_Patient_Co) throws Exception
    {
        Element sNK1_1 = stack.get(1);
        for(Element sNK1_3 : namedChildElements(sNK1_1,"NK1.2"))
        {
            HumanName t_name_HumanName_2 = new HumanName();
            t_contact_Patient_Co.setName(t_name_HumanName_2);
            List<Element> stack1 = push(sNK1_3,stack);
            pFamily_2(stack1, t_name_HumanName_2);
            pUse_3(stack1, t_name_HumanName_2);

            Node sXPN_4 = namedChildNode(sNK1_3,"XPN.5");
            if (sXPN_4 != null) t_name_HumanName_2.getPrefix().add(new StringType(getText(sXPN_4)));

            Node sXPN_5 = namedChildNode(sNK1_3,"XPN.2");
            if (sXPN_5 != null) t_name_HumanName_2.getGiven().add(new StringType(getText(sXPN_5)));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1; (2)NK1_2;
     * @param t_name_HumanName_2 - reached by target path: Bundle.entry.resource.contact.name
     */
    protected void pFamily_2(List<Element> stack, HumanName t_name_HumanName_2) throws Exception
    {
        Element sNK1_3 = stack.get(2);
        for(Element sXPN_3 : namedChildElements(sNK1_3,"XPN.1"))
        {
            List<Element> stack1 = push(sXPN_3,stack);

            Node sFamily_2 = namedChildNode(sXPN_3,"FN.1");
            if (sFamily_2 != null) t_name_HumanName_2.setFamily(getText(sFamily_2));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1; (2)NK1_2;
     * @param t_name_HumanName_2 - reached by target path: Bundle.entry.resource.contact.name
     */
    protected void pUse_3(List<Element> stack, HumanName t_name_HumanName_2) throws Exception
    {
        Element sNK1_3 = stack.get(2);
        for(Element sUse_3 : namedChildElements(sNK1_3,"XPN.7"))
        {
            t_name_HumanName_2.setUse(HumanName.NameUse.fromCode(humanName_use_conversion(getText(sUse_3))));
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05; (1)NK1;
     * @param t_contact_Patient_Co - reached by target path: Bundle.entry.resource.contact
     */
    protected void rTelecom_ContactPoin_1(List<Element> stack, Patient.ContactComponent t_contact_Patient_Co) throws Exception
    {
        Element sNK1_1 = stack.get(1);
        for(Element sNK1_4 : namedChildElements(sNK1_1,"NK1.5"))
        {
            List<Element> stack1 = push(sNK1_4,stack);
            for(Element sXTN_1 : namedChildElements(sNK1_4,"XTN.1"))
            {
                ContactPoint t_telecom_ContactPoi_1 = new ContactPoint();
                t_contact_Patient_Co.addTelecom(t_telecom_ContactPoi_1);
                t_telecom_ContactPoi_1.setSystem(ContactPoint.ContactPointSystem.fromCode("phone"));
                t_telecom_ContactPoi_1.setValue(getText(sXTN_1));
            }
        }
    }

    /**
     * @param stack - source elements (0)ADT_A05;
     * @param t_resource_Patient - reached by target path: Bundle.entry.resource
     */
    protected void rPatient_Communicati(List<Element> stack, Patient t_resource_Patient) throws Exception
    {
        Element sourceTop = stack.get(0);
        for(Element sPID_9 : namedChildElements(sourceTop,"PID"))
        {
            List<Element> stack1 = push(sPID_9,stack);
            for(Element sPID_10 : namedChildElements(sPID_9,"PID.15"))
            {
                List<Element> stack2 = push(sPID_10,stack1);
                for(Element sCE : namedChildElements(sPID_10,"CE.1"))
                {
                    Patient.PatientCommunicationComponent t_communication_Pati = new Patient.PatientCommunicationComponent();
                    t_resource_Patient.addCommunication(t_communication_Pati);
                    CodeableConcept t_language_CodeableC = new CodeableConcept();
                    t_communication_Pati.setLanguage(t_language_CodeableC);
                    Coding t_Coding = new Coding();
                    t_language_CodeableC.addCoding(t_Coding);
                    t_Coding.setCode(coding_code_conversion(getText(sCE)));
                }
            }
        }
    }

    protected String address_use_conversion(String val)
    {
        if("H".equals(val)) return "home";
        if("C".equals(val)) return "temp";
        if("O".equals(val)) return "work";
        if("BA".equals(val)) return "old";
        return"";
    }

    protected String patient_gender_conversion(String val)
    {
        if("1".equals(val)) return "male";
        if("2".equals(val)) return "female";
        return"";
    }

    protected String humanName_use_conversion(String val)
    {
        if("L".equals(val)) return "official";
        if("M".equals(val)) return "maiden";
        if("N".equals(val)) return "nickname";
        return"";
    }

    protected String coding_code_conversion(String val)
    {
        if("EN".equals(val)) return "en";
        if("FR".equals(val)) return "fr";
        return"";
    }
}
